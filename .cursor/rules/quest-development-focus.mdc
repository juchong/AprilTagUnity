---
alwaysApply: true
description: Quest headset development focus and AprilTagSceneSetup usage guidelines
---

# Quest Development Focus

This project is designed specifically for Meta Quest headsets. All development should focus on runtime functionality that works on Quest devices, not editor-based debugging tools.

## Primary Development Target

### AprilTagSceneSetup.cs
**Location**: [AprilTagSceneSetup.cs](mdc:Assets/AprilTag/AprilTagSceneSetup.cs)

This is the **PRIMARY FOCUS** for all Quest-related development and configuration:

- **Runtime Configuration**: Handles complete system setup for Quest deployment
- **Permission Management**: Integrates with Quest permission system
- **Component Creation**: Automatically creates all necessary components
- **Quest-Optimized Setup**: Configured specifically for Quest headset requirements

```csharp
// Focus on modifying AprilTagSceneSetup.cs for Quest deployment
public class AprilTagSceneSetup : MonoBehaviour
{
    [Header("Quest Configuration")]
    [SerializeField] private bool createWebCamManager = true;
    [SerializeField] private bool createPermissionSystem = true;
    [SerializeField] private bool createAprilTagController = true;
    
    // Quest-specific setup methods
    void SetupCompleteSystem()
    {
        // Create all components needed for Quest deployment
        CreateWebCamTextureManager();
        CreatePermissionManager();
        CreateAprilTagController();
        ConnectComponents();
    }
}
```

## Quest-Specific Development Guidelines

### What to AVOID
- ❌ **Context menus** - Don't work on Quest headsets
- ❌ **Unity debugging tools** - Not accessible on Quest devices
- ❌ **Editor-only features** - Focus on runtime functionality
- ❌ **Inspector-only configuration** - Must be programmatic for Quest

### What to FOCUS ON
- ✅ **Runtime configuration** - All settings must work on Quest
- ✅ **Programmatic setup** - Use code to configure components
- ✅ **Quest-optimized performance** - Maintain 72/90 FPS targets
- ✅ **Permission handling** - Essential for Quest camera access

## File Modification Guidelines

### NEVER Modify
- `.meta` files - Will cause Unity issues [[memory:8818643]]
- `.unity` files - Focus on code changes only
- Unity editor scripts - Not useful on Quest

### PRIORITIZE Modifying
- `AprilTagSceneSetup.cs` - Primary configuration file
- `AprilTagController.cs` - Core detection logic
- Permission-related files - Essential for Quest functionality

## Quest Testing Requirements

### Development Workflow
1. **Code Changes**: Modify C# files (especially AprilTagSceneSetup.cs)
2. **Build APK**: Create Android build for Quest
3. **Deploy to Quest**: Install and test on actual Quest hardware
4. **Verify Functionality**: Ensure AprilTag detection works on Quest

### Testing Considerations
```csharp
// Quest-specific testing patterns
void TestOnQuest()
{
    #if UNITY_ANDROID && !UNITY_EDITOR
        // Quest-specific test code
        if (SystemInfo.deviceModel.Contains("Quest"))
        {
            // Quest-specific functionality
            TestQuestFeatures();
        }
    #endif
}
```

## Quest Performance Optimization

### Quest-Specific Settings
```csharp
// Configure for Quest performance in AprilTagSceneSetup
void ConfigureForQuest()
{
    // Quest 2: 72 FPS target
    // Quest Pro/3: 90 FPS target
    
    // Optimize detection frequency
    maxDetectionsPerSecond = 15f;
    
    // Use appropriate decimation
    decimation = 2; // Start with 2, increase for performance
    
    // Quest-specific camera settings
    ConfigureQuestCamera();
}
```

### Quest Hardware Considerations
- **Limited RAM**: Quest 2 (6GB), Quest Pro/3 (12GB)
- **Thermal Management**: Device may throttle under heavy load
- **Battery Life**: Optimize for extended usage
- **Passthrough Quality**: Balance between quality and performance

## Integration with Quest Features

### Passthrough Camera Integration
```csharp
// Quest-specific passthrough camera setup
void SetupQuestPassthrough()
{
    // Use reflection to avoid compile dependencies
    var webCamManager = CreateWebCamTextureManager();
    
    // Configure for Quest passthrough
    ConfigureQuestCameraSettings(webCamManager);
    
    // Handle Quest-specific permissions
    SetupQuestPermissions();
}
```

### Quest Permission System
```csharp
// Quest-specific permission handling
void SetupQuestPermissions()
{
    // Required Quest permissions
    var requiredPermissions = new[]
    {
        "android.permission.CAMERA",
        "horizonos.permission.HEADSET_CAMERA",
        "com.oculus.permission.USE_SCENE"
    };
    
    // Request permissions programmatically
    RequestQuestPermissions(requiredPermissions);
}
```

## Best Practices for Quest Development

1. **Always test on actual Quest hardware** - Editor testing is insufficient
2. **Focus on runtime functionality** - Avoid editor-only features
3. **Prioritize AprilTagSceneSetup.cs** - Main configuration file for Quest
4. **Use programmatic configuration** - Don't rely on inspector settings
5. **Optimize for Quest performance** - Maintain frame rate targets
6. **Handle Quest permissions properly** - Essential for camera access
7. **Never create .meta or .unity files** - Focus on C# code changes
8. **Test permission flows on Quest** - Permission behavior differs from editor

## Quest Deployment Checklist

- [ ] All configuration is in AprilTagSceneSetup.cs
- [ ] No editor-only features are used
- [ ] Quest permissions are handled properly
- [ ] Performance targets are met (72/90 FPS)
- [ ] Camera feed works on Quest
- [ ] AprilTag detection functions on Quest
- [ ] No .meta or .unity files are modified
- [ ] Tested on actual Quest hardware